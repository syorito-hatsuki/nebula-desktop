name: Linux Release

on:
  push:
    branches: [ "master" ]
    paths:
      - gradle.properties
    
  workflow_dispatch:
  
permissions:
  contents: write

#
#jobs:
#  build-linux:
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#
#      - name: Setup JDK 21
#        uses: actions/setup-java@v4
#        with:
#          distribution: temurin
#          java-version: 21
#
#      - name: Get latest version from gradle.properties
#        id: version
#        run: |
#          VERSION=$(grep -oP '^app.version=\K.*' gradle.properties)
#          echo "version=$VERSION" >> $GITHUB_OUTPUT
#
#      - name: Build Linux native distributions
#        run: ./gradlew :composeApp:packageReleaseDistributionForCurrentOS
#
#      - name: Upload to GitHub Release
#        uses: softprops/action-gh-release@v2
#        with:
#          name: Nebula Desktop ${{ steps.version.outputs.version }}
#          tag_name: ${{ steps.version.outputs.version }}
#          files: |
#            composeApp/build/compose/binaries/main-release/deb/*.deb
#            composeApp/build/compose/binaries/main-release/rpm/*.rpm
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build-linux:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      linux-files: ${{ steps.set-files.outputs.files }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Get version from gradle.properties
        id: get-version
        run: |
          VERSION=$(grep -oP '^app.version=\K.*' gradle.properties)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build Linux distributions
        run: ./gradlew :composeApp:packageReleaseDistributionForCurrentOS

      - name: Set Linux files
        id: set-files
        run: |
          echo "files=$(ls composeApp/build/compose/binaries/main-release/deb/*.deb composeApp/build/compose/binaries/main-release/rpm/*.rpm | tr '\n' ' ')" >> $GITHUB_OUTPUT

  build-mac:
    runs-on: macos-latest
    outputs:
      mac-files: ${{ steps.set-files.outputs.files }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Build macOS distributions
        run: ./gradlew :composeApp:packageReleaseDistributionForCurrentOS

      - name: Set macOS files
        id: set-files
        run: |
          echo "files=$(ls composeApp/build/compose/binaries/main-release/macos/*.dmg composeApp/build/compose/binaries/main-release/macos/*.pkg | tr '\n' ' ')" >> $GITHUB_OUTPUT

  build-windows:
    runs-on: windows-latest
    outputs:
      windows-files: ${{ steps.set-files.outputs.files }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Build Windows distributions
        run: ./gradlew :composeApp:packageReleaseDistributionForCurrentOS

      - name: Set Windows files
        id: set-files
        run: |
          powershell -Command "Write-Output ('files=' + (Get-ChildItem composeApp/build/compose/binaries/main-release/windows/*.exe, composeApp/build/compose/binaries/main-release/windows/*.msi | ForEach-Object { $_.FullName } ) -join ' ') | Out-File -Encoding utf8 -FilePath $env:GITHUB_OUTPUT"

  release:
    runs-on: ubuntu-latest
    needs: [build-linux, build-mac, build-windows]
    steps:
      - uses: actions/checkout@v4

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.build-linux.outputs.version }}
          name: Nebula Desktop ${{ github.ref_name }}
          files: |
            ${{ needs.build-linux.outputs.linux-files }}
            ${{ needs.build-mac.outputs.mac-files }}
            ${{ needs.build-windows.outputs.windows-files }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}